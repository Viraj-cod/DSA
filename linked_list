class Node:
    def __init__(self,val):
        self.val=val
        self.next=None

class Linkedlist:
    def __init__(self,val):
        new=Node(val)
        self.head=new
        self.tail=new
        self.length=1
    
    def print_ll(self):
        temp=self.head
        while temp is not None:
            print(temp.val,end='->')
            temp=temp.next
        print(None)
    
    def append(self,val):
        new=Node(val)
        if self.head is None:
            self.head=new
            self.tail=new
        else:
            self.tail.next=new
            self.tail=new
        self.length+=1
        return True
        
    def pop(self):
        if self.length==0:
            return None
        slow=self.head
        if self.length==1:
            self.head=None
            self.tail=None
        else:
            fast=slow.next
            while fast.next is not None:
                fast=fast.next
                slow=slow.next
            self.tail=slow
            slow.next=None
            self.length-=1
            return fast
        self.length-=1
        return slow
        
    def prepend(self,val):
        new=Node(val)
        if self.length == 0:
            self.head=None
            self.tail=None
        else:
            new.next=self.head
            self.head=new
        self.length+=1
        return True
    
    def pop_first(self):
        if self.head == None:
            return None
        temp = self.head
        if self.length ==1:
            self.head=None
            self.tail=None
            self.length-=1
            return temp
        self.head=self.head.next
        temp.next=None
        self.length-=1
        return temp
    
    def get(self,index):
        if index<0 or index>= self.length:
            return None
        temp=self.head
        for _ in range(index):
            temp=temp.next
        return temp
        
    def set_val(self,index,val):
        if index<0 or index >= self.length:
            return None
        temp=self.get(index)
        if temp:
            temp.val = val
            return True
        return False
    
    def insert(self,index,val):
        if index<0 or index > self.length:
            return None
        if index==0:
            return self.prepend(val)
        elif index==self.length:
            return self.append(val)
        new=Node(val)
        temp=self.get(index-1)
        new.next=temp.next
        temp.next=new
        self.length+=1
        return True
            
    def remove(self,index):
        if index<0 or index >= self.length:
            return None
        if index == 0:
            return self.pop_first()
        if index==self.length-1:
            return self.pop()
        pre=self.get(index-1)
        temp=pre.next
        pre.next=temp.next
        temp.next=None
        self.length-=1
        return temp
    
    def reverse(self):
        temp=self.head
        self.head=self.tail
        self.tail=temp
        after=temp.next
        before=None
        for i in range(self.length):
            after=temp.next
            temp.next=before
            before=temp
            temp=after
        self.print_ll()

ll=Linkedlist(9)
ll.append(8)
ll.append(6)
#ll.print_ll()
ll.prepend(1)
ll.print_ll()

ll.reverse()
            
        
