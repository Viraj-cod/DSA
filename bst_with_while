class Node:
    def __init__(self,val):
        self.val=val
        self.left=None
        self.right=None

class bst:
    def __init__(self):
        self.root=None
    
    def insert(self,val):
        new=Node(val)
        if self.root is None:
            self.root=new
            return True
        temp=self.root
        while True:
            if temp.val==val:
                return False
            if val<temp.val:
                if temp.left is None:
                    temp.left=new
                    return True
                temp=temp.left
            else:
                if temp.right is None:
                    temp.right=new
                    return True
                temp=temp.right
    
    def contains(self,val):
        temp=self.root
        while temp is not None:
            if temp.val > val:
                temp=temp.left
            elif temp.val < val:
                temp=temp.right
            else:
                return True
        return False
    
    def dis(self,root,level=0):
        if root:
            self.dis(root.right,level+1)
            print(' '*level*3+'->',root.val)
            self.dis(root.left,level+1)

bt=bst()
bt.insert(4)
bt.insert(3)
bt.insert(7)
bt.insert(9)
bt.insert(2)
bt.dis(bt.root)
print(bt.contains(0))


            
            
