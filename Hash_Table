class Hashtable:
    def __init__(self,size):
        self.hash = [None]*size
    
    def __hash_method(self,key):
        ind=0
        for letter in key:
            ind = (ind+ord(letter) * 23) % len(self.hash)
        return ind
    
    def show(self):
        for i,j in enumerate(self.hash):
            print(i,':',j)
    
    def add_item(self,key,val):
        ind=self.__hash_method(key)
        if self.hash[ind] is None:
            self.hash[ind] = []
        self.hash[ind].append([key,val])
    
    def get_item(self,key):
        ind=self.__hash_method(key)
        if self.hash[ind] is not None:
            for i in range(len(self.hash[ind])):
                if self.hash[ind][i][0]==key:
                    return self.hash[ind][i][1]
        return None

    def keys(self):
        res=[]
        for i in range(len(self.hash)):
            if self.hash[i] is not None:
                for j in range(len(self.hash[i])):
                    res.append(self.hash[i][j][0])
        return res

hs=Hashtable(8)
hs.add_item('One',4)
hs.add_item('Two',6)
hs.add_item('Three',6)
hs.add_item('Four',9)
hs.add_item('Six',9)
hs.add_item('Ten',7)
hs.add_item('Six',99)
hs.add_item('Six',78)
print(hs.keys())
hs.show()
