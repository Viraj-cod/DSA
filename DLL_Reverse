class Node:
    def __init__(self,val):
        self.val=val
        self.next=None
        self.prev=None

class doublylinkedlist:
    def __init__(self,val):
        new=Node(val)
        self.head=new
        self.tail=new
        self.length=1
    
    def append(self,val):
        new=Node(val)
        if self.head is None:
            self.head=new
            self.tail=new
        else:
            self.tail.next=new
            new.prev=self.tail
            self.tail=new
        self.length+=1
        return True
    
    def pop(self):
        if self.length==0:
            return None
        temp=self.tail
        if self.length==1:
            self.head=None
            self.tail=None
        else:
            self.tail=self.tail.prev
            self.tail.next=None
            temp.prev=None
        self.length-=1
        return temp
    
    def prepend(self,val):
        new=Node(val)
        if self.head is None:
            self.head=new
            self.tail=new
        else:
            new.next=self.head
            self.head.prev=new
            self.head=new
        self.length+=1
        return True
    
    def pop_first(self):
        if self.length==0:
            return None
        temp=self.head
        if self.length==1:
            self.head=None
            self.tail=None
        else:
            self.head=self.head.next
            self.head.prev=None
            temp.next=None
        self.length-=1
        return temp
    
    def get(self,index):
        if index<0 or index >= self.length:
            return None
        temp=self.head
        if index<self.length//2:
            for _ in range(index):
                temp=temp.next
        else:
            temp=self.tail
            for _ in range(self.length-1,index,-1):
                temp=temp.prev
        return temp    
    
    def set_val(self,index,val):
        temp=self.get(index)
        if temp:
            temp.val=val
            return True
        return False
    
    def isert(self,index,val):
        if index<0 or index<self.length:
            return None
        if index==0:
            return self.prepend(val)
        if index==self.length:
            return self.append(val)
        new=Node(val)
        before=self.get(index-1)
        after=before.next
        new.next=after
        new.prev=before
        before.next=new
        after.prev=new
        self.length+=1
        return True
    
    def remove(self,index):
        if index<0 or index>=self.length:
            return None
        if index==0:
            return self.pop_first()
        if index==self.length-1:
            return self.pop()
        temp=self.get(index)
        temp.prev.next=temp.next
        temp.next.prev=temp.prev
        temp.next,temp.prev=None,None
        self.length-=1
        return temp
    
    def reverse(self):
        temp=self.head
        for _ in range(self.length):
            temp.next,temp.prev=temp.prev,temp.next
            temp=temp.prev
        self.head,self.tail=self.tail,self.head
        self.print_dll()
            
    def print_dll(self):
        temp=self.head
        while temp:
            print(temp.val,end='->')
            temp=temp.next
        print(None)
        
dll=doublylinkedlist(9)
dll.append(8)
dll.append(7)
dll.print_dll()
dll.reverse()
        
            
        
            
        
        
